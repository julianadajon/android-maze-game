package falstad;

import java.util.Arrays;

import falstad.Robot.Direction;
import falstad.Robot.Turn;
import generation.CardinalDirection;
import generation.Distance;
import generation.MazeConfiguration; 
public class Wizard implements RobotDriver{

	Robot robot; 
	BasicRobot basicRobot;
	int width; 
	int height; 
	Distance distance; 
	MazeController controller; 
	MazeConfiguration container; 
	
	public Wizard(){
		
	}
	
	@Override
	//edited this, made robot of type robot
	public void setRobot(BasicRobot r) {
		basicRobot = r; 
	}
	


	@Override
	public void setDimensions(int width, int height) {
		this.width = width; 
		this.height = height; 
	}

	@Override
	public void setDistance(Distance distance) {
		this.distance = distance; 
	}


	@Override
	public boolean drive2Exit() throws Exception{
		if (basicRobot.hasStopped() == true){
			throw new Exception();
		}
		
		//get the robot's controller
		controller = basicRobot.getMazeController();
		container = basicRobot.getMazeConfiguration();
		
		//get current position
		int[] currPos = controller.getCurrentPosition();
		
		//while curr position's distance to exit is > 1: 
		while (container.getDistanceToExit(currPos[0], currPos[1]) > 1){
			System.out.println("entered while loop in wizard.solve()");
			//	move the robot to neighbor closest to exit
			//get direction of neightClos to exit
			//assuming default direction is east, rotate the robot so that 
			//it is facing the neighborClosToExit
			//move robot forward
	
			
			int[] dirNeighbor = basicRobot.getDirectionOfNeighborClosestToExit(); 
			CardinalDirection currDir = controller.getCurrentDirection(); 
			int[] north = {0,-1};
			int[] south = {0,1};
			int[] east = {1,0};
			int[] west = {-1, 0}; 
			
			System.out.println("Direction of neighb closest to exit: " + Arrays.toString(dirNeighbor));
			

				//If neighbor closest to exit is to the north of my current position
				if (Arrays.equals(dirNeighbor, north)){
					
					if (currDir == CardinalDirection.North){
						basicRobot.move(1, false); 
					}
					
					if (currDir == CardinalDirection.South){
						basicRobot.rotate(Turn.AROUND);
						basicRobot.move(1, false); 
					}
					
					if (currDir == CardinalDirection.West){
						basicRobot.rotate(Turn.LEFT);
						basicRobot.move(1, false); 
					}
					
					if (currDir == CardinalDirection.East){
						basicRobot.rotate(Turn.RIGHT);
						basicRobot.move(1, false); 
					}
					
	//				update current position
					int[] newCurrPos = controller.getCurrentPosition();
					currPos[0] = newCurrPos[0];
					currPos[1] = newCurrPos[1];
					System.out.println("updated curr position: " + Arrays.toString(newCurrPos));
					System.out.println(" " );
				}
				
				
				
				//If neighbor closest to exit is to the South of my current position
				if (Arrays.equals(dirNeighbor, south)){
					if (currDir == CardinalDirection.North){
						basicRobot.rotate(Turn.AROUND);
						basicRobot.move(1, false); 
					}
					
					if (currDir == CardinalDirection.South){
						basicRobot.move(1, false); 
					}
					
					if (currDir == CardinalDirection.West){
						basicRobot.rotate(Turn.RIGHT);
						basicRobot.move(1, false); 
					}
					
					if (currDir == CardinalDirection.East){
						basicRobot.rotate(Turn.LEFT);
						basicRobot.move(1, false); 
					}
					
	//				update current position
					int[] newCurrPos = controller.getCurrentPosition();
					currPos[0] = newCurrPos[0];
					currPos[1] = newCurrPos[1];
					System.out.println("updated curr position: " + Arrays.toString(newCurrPos));
					System.out.println(" " );
				}
				
				
				
				//If neighbor closest to exit is to the East of my current position
				if (Arrays.equals(dirNeighbor, east)){
					if (currDir == CardinalDirection.North){
						basicRobot.rotate(Turn.LEFT);
						basicRobot.move(1, false); 
					}
					
					if (currDir == CardinalDirection.South){
						basicRobot.rotate(Turn.RIGHT);
						basicRobot.move(1, false); 
					}
					
					if (currDir == CardinalDirection.West){
						basicRobot.rotate(Turn.AROUND);
						basicRobot.move(1, false); 
					}
					
					if (currDir == CardinalDirection.East){
						basicRobot.move(1, false); 
					}

					
	//				update current position
					int[] newCurrPos = controller.getCurrentPosition();
					currPos[0] = newCurrPos[0];
					currPos[1] = newCurrPos[1];
					System.out.println("updated curr position: " + Arrays.toString(newCurrPos));
					System.out.println(" " );
				}
				
				
				
				//If neighbor closest to exit is to the West of my current position
				if (Arrays.equals(dirNeighbor, west)){
					if (currDir == CardinalDirection.North){
						basicRobot.rotate(Turn.RIGHT);
						basicRobot.move(1, false); 
					}
					
					if (currDir == CardinalDirection.South){
						basicRobot.rotate(Turn.LEFT);
						basicRobot.move(1, false); 
					}
					
					if (currDir == CardinalDirection.West){
						basicRobot.move(1, false); 
					}
					
					if (currDir == CardinalDirection.East){
						basicRobot.rotate(Turn.AROUND);
						basicRobot.move(1, false); 
					}

					
	//				update current position
					int[] newCurrPos = controller.getCurrentPosition();
					currPos[0] = newCurrPos[0];
					currPos[1] = newCurrPos[1];
					System.out.println("updated curr position: " + Arrays.toString(newCurrPos));
					System.out.println(" " );
				}
			
		}
		
		//check each direction if you can see exit
		//depending on direction of robot, rotate towards exit, then move
		if (basicRobot.canSeeExit(Direction.LEFT) == true){
			basicRobot.rotate(Turn.LEFT);
			basicRobot.move(1, false);
//			controller.state = Constants.StateGUI.STATE_FINISH;
//			controller.notifyViewerRedraw();
		}
		//may need to switch direction to backward
		if (basicRobot.canSeeExit(Direction.FORWARD) == true){
			basicRobot.move(1, false);
//			controller.state = Constants.StateGUI.STATE_FINISH;
//			controller.notifyViewerRedraw();

		}
		//may need to switch direction to forward
		if (basicRobot.canSeeExit(Direction.BACKWARD) == true){
			basicRobot.rotate(Turn.AROUND);
			basicRobot.move(1, false);
//			controller.state = Constants.StateGUI.STATE_FINISH;
//			controller.notifyViewerRedraw();

		}

		if (basicRobot.canSeeExit(Direction.RIGHT) == true){
			basicRobot.rotate(Turn.RIGHT);
			basicRobot.move(1, false);
//			controller.state = Constants.StateGUI.STATE_FINISH;
//			controller.notifyViewerRedraw();

		}
		
		return true;
		
		
	}
	
	@Override
	public float getEnergyConsumption() {
		return 2500 - basicRobot.getBatteryLevel();
	}

	@Override
	public int getPathLength() {
		return basicRobot.getPathLength();
	}

}
