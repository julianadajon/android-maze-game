/**
 * 
 */
package falstad;

import generation.MazeConfiguration;
import generation.Order;

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Panel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.io.File;

import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JPanel;


/**
 * This class is a wrapper class to startup the Maze game as a Java application
 * 
 *
 * This code is refactored code from Maze.java by Paul Falstad, www.falstad.com, Copyright (C) 1998, all rights reserved
 * Paul Falstad granted permission to modify and use code for teaching purposes.
 * Refactored by Peter Kemper
 * 
 * TODO: use logger for output instead of Sys.out
 */
public class MazeApplication extends JFrame{

	// not used, just to make the compiler, static code checker happy
	private static final long serialVersionUID = 1L;



	private BasicRobot basicRobot; 
	private RobotDriver driver; 
	private Panel panel; 
	private MazeController controller;
	
	JComboBox chooseBuilder;
	JComboBox chooseDriver;
	JComboBox chooseSkillLevel; 
	Button b;
	
	private SimpleKeyListener kl ;
	/**
	 * Constructor
	 */
	public MazeApplication() {
		super() ;
		System.out.println("MazeApplication: maze will be generated with a randomized algorithm.");

		basicRobot = new BasicRobot();
		driver = new ManualDriver();
		
		controller = new MazeController(basicRobot) ;
		

		

	
		System.out.println("controller null: " + (controller == null));
		
		init() ;
		
		basicRobot.setMaze(controller);
		driver.setRobot(basicRobot);
		
//		try {
//			
//			driver.drive2Exit();
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} 
		
	}

	/**
	 * Constructor that loads a maze from a given file or uses a particular method to generate a maze
	 */
	public MazeApplication(String parameter) {
		super() ;
		// scan parameters
		// Case 1: Prim
		if ("Prim".equalsIgnoreCase(parameter))
		{
			System.out.println("MazeApplication: generating random maze with Prim's algorithm");
			
			basicRobot = new BasicRobot();
			driver = new ManualDriver();
			controller = new MazeController(Order.Builder.Prim);

			
			init() ;
			return ;
		}
		// Case 2: Eller
		// TODO: for P2 assignment, please add code for Eller's algorithm here
		if ("Eller".equalsIgnoreCase(parameter))
		{
			System.out.println("MazeApplication: generating random maze with Eller's algorithm");
// manual driver			
//			robot = new BasicRobot();
//			manualDriver = new ManualDriver();
//			controller = new MazeController(Order.Builder.Eller, manualDriver) ;

// wizard driver
//			basicRobot = new BasicRobot(); 
//			wizardDriver = new Wizard(); 
//			controller = new MazeController(Order.Builder.Eller, wizardDriver); 
//			
//			init() ;
//			
//			basicRobot.setMaze(controller);
//			wizardDriver.setBasicRobot(basicRobot);
	
// wallfollower driver
//			basicRobot = new BasicRobot(); 
//			wallFollowerDriver = new WallFollower();
//			controller = new MazeController(Order.Builder.Eller, wallFollowerDriver); 
//			
//			init(); 
//			
//			basicRobot.setMaze(controller);
//			wallFollowerDriver.setBasicRobot(basicRobot);
			
// pledge driver
			basicRobot = new BasicRobot(); 
			driver = new Pledge();
			controller = new MazeController(Order.Builder.Eller, driver);
			
			init(); 
			
			basicRobot.setMaze(controller);
			driver.setRobot(basicRobot);
			
			return ;
		}
		
		
		// Case 3: a file
		File f = new File(parameter) ;
		if (f.exists() && f.canRead())
		{
			System.out.println("MazeApplication: loading maze from file: " + parameter);
			
			basicRobot = new BasicRobot();
			driver = new ManualDriver();
			controller = new MazeController(parameter, driver) ;

			init();
			return ;
		}
		// Default case: 
		System.out.println("MazeApplication: unknown parameter value: " + parameter + " ignored, operating in default mode.");
		
		basicRobot = new BasicRobot();
		driver = new ManualDriver();
		controller = new MazeController(driver) ;

		init() ;
		


	}

	/**
	 * Initializes some internals and puts the game on display.
	 */
	private void init() {


		
		//string arrays for builders, drivers, skill level
		String[] builders = {"Eller", "Prim", "DFS"};
		String[] drivers = {"Manual Driver", "Wizard","Wall Follower", "Pledge"};
		String[] skillLevel= {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"};
		
		chooseBuilder = new JComboBox(builders); 
		chooseDriver = new JComboBox(drivers);
		chooseSkillLevel = new JComboBox(skillLevel);
		
		b = new Button("Click Me!"); 
		
		add(chooseBuilder, BorderLayout.WEST);
		add(chooseDriver, BorderLayout.EAST);
		add(chooseSkillLevel, BorderLayout.SOUTH);
		add(controller.getPanel(), BorderLayout.CENTER) ;
		add(b, BorderLayout.NORTH); 

		
		System.out.println("maze controller in init(): " + (controller == null));
		MazeActList al = new MazeActList(this, controller, this);

		b.addActionListener(al);
		
		kl = new SimpleKeyListener(this, controller);
		addKeyListener(kl);
		kl.setDriver(driver);
		
		setSize(630, 400) ;

		setVisible(true) ;
		
		// focus should be on the JFrame of the MazeApplication and not on the maze panel
		// such that the SimpleKeyListener kl is used
		setFocusable(true) ;

		
		controller.init(); 
		

//		chooseBuilder.setVisible(false);
//		chooseSkillLevel.setVisible(false);
//		chooseDriver.setVisible(false);
//		b.setVisible(false);
		

	
		
		



// for manual driver
//		robot.setMaze(controller);
//		manualDriver.setRobot(robot);
//		kl.setDriver(manualDriver);

		
	}
	
	
	/**
	 * Main method to launch Maze as a java application.
	 * The application can be operated in two ways. The intended normal operation is to provide no parameters
	 * and the maze will be generated by a particular algorithm. If a filename is given, the maze will be loaded
	 * from that file. The latter option is useful for development to check particular mazes.
	 * @param args is optional, first parameter is a filename with a given maze
	 */
	public static void main(String[] args) {
		MazeApplication a ; 
		switch (args.length) {
		case 1 : a = new MazeApplication(args[0]);
		break ;
		case 0 : 
		default : a = new MazeApplication() ;
		
		break ;
		}
		

		a.repaint() ;
		
	}
	

		

		
		


}
