<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (1.8.0_101) on Sun Sep 04 23:05:30 EDT 2016 -->
<title>SimplePuzzleStateTest</title>
<meta name="date" content="2016-09-04">
<link rel="stylesheet" type="text/css" href="../../../../../stylesheet.css" title="Style">
<script type="text/javascript" src="../../../../../script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="SimplePuzzleStateTest";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/SimplePuzzleStateTest.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev&nbsp;Class</li>
<li>Next&nbsp;Class</li>
</ul>
<ul class="navList">
<li><a href="../../../../../index.html?edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html" target="_top">Frames</a></li>
<li><a href="SimplePuzzleStateTest.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../../../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">edu.wm.cs.cs301.slidingpuzzle</div>
<h2 title="Class SimplePuzzleStateTest" class="title">Class SimplePuzzleStateTest</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>edu.wm.cs.cs301.slidingpuzzle.SimplePuzzleStateTest</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public class <span class="typeNameLabel">SimplePuzzleStateTest</span>
extends java.lang.Object</pre>
<div class="block">Junit test cases for SimplePuzzleState implementation of PuzzleState interface.
 Class contains a number of black box tests.
 Test scenario: 4x4 board with 1 empty slot
 Sequence of moves: down, right, right and then reversed as left, left, up 
 such that cycle back to starting state is closed.
 
 Warning 1: the setUp method performs calls to setToInitialState() and move()
 which must be implemented to pass even the most basic tests. 
 
 Warning 2: the tests use the SimplePuzzleState.equals() method, 
 which must be implemented as well as the hashcode() method.
 We assume the following notion of equality: 
 two states are equal if the tiles on the board are of equal value on all positions. 
 Parent, path length or operation do not matter for equality.</div>
<dl>
<dt><span class="simpleTagLabel">Author:</span></dt>
<dd>Peter Kemper</dd>
</dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#SimplePuzzleStateTest--">SimplePuzzleStateTest</a></span>()</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#setUp--">setUp</a></span>()</code>
<div class="block">Junit calls this method automatically each time before executing a method tagged as a test.</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#tearDown--">tearDown</a></span>()</code>
<div class="block">Junit calls this method automatically each time after executing a method tagged as a test.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#testEqualsObject--">testEqualsObject</a></span>()</code>
<div class="block">Test method for <code>Object.equals(java.lang.Object)</code>.</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#testFlip--">testFlip</a></span>()</code>
<div class="block">Test method for <code>SimplePuzzleState.flip(int, int, int, int)</code>.</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#testFlipForMultipleEmptySlots--">testFlipForMultipleEmptySlots</a></span>()</code>
<div class="block">Test method for <code>SimplePuzzleState.flip(int, int, int, int)</code>.</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#testFlipForMultipleEmptySlotsCross--">testFlipForMultipleEmptySlotsCross</a></span>()</code>
<div class="block">Test method for <code>SimplePuzzleState.flip(int, int, int, int)</code>.</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#testFlipForMultipleEmptySlotsDeadEnd--">testFlipForMultipleEmptySlotsDeadEnd</a></span>()</code>
<div class="block">Test method for <code>SimplePuzzleState.flip(int, int, int, int)</code>.</div>
</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#testFlipForMultipleEmptySlotsDeadEnd2--">testFlipForMultipleEmptySlotsDeadEnd2</a></span>()</code>
<div class="block">Test method for <code>SimplePuzzleState.flip(int, int, int, int)</code>.</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#testFlipForMultipleEmptySlotsNotUnique--">testFlipForMultipleEmptySlotsNotUnique</a></span>()</code>
<div class="block">Test method for <code>SimplePuzzleState.flip(int, int, int, int)</code>.</div>
</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#testGetOperation--">testGetOperation</a></span>()</code>
<div class="block">Test method for <code>SimplePuzzleState.getOperation()</code>.</div>
</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#testGetParent--">testGetParent</a></span>()</code>
<div class="block">Test method for <code>SimplePuzzleState.getParent()</code>.</div>
</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#testGetPathLength--">testGetPathLength</a></span>()</code>
<div class="block">Test method for <code>SimplePuzzleState.getPathLength()</code>.</div>
</td>
</tr>
<tr id="i12" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#testGetStateWithShortestPath--">testGetStateWithShortestPath</a></span>()</code>
<div class="block">Test method for <code>SimplePuzzleState.getStateWithShortestPath()</code>.</div>
</td>
</tr>
<tr id="i13" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#testGetValue--">testGetValue</a></span>()</code>
<div class="block">Test method for <code>SimplePuzzleState.getValue(int, int)</code>.</div>
</td>
</tr>
<tr id="i14" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#testHashCode--">testHashCode</a></span>()</code>
<div class="block">Test method for <code>Object.hashCode()</code>.</div>
</td>
</tr>
<tr id="i15" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#testIsEmptyIntInt--">testIsEmptyIntInt</a></span>()</code>
<div class="block">Test method for <code>SimplePuzzleState.isEmpty(int, int)</code>.</div>
</td>
</tr>
<tr id="i16" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#testMove--">testMove</a></span>()</code>
<div class="block">Test method for <code>SimplePuzzleState.move(int, int, edu.wm.cs.cs301.slidingpuzzle.PuzzleState.Operation)</code>.</div>
</td>
</tr>
<tr id="i17" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#testSetToInitialState--">testSetToInitialState</a></span>()</code>
<div class="block">Test method for <code>SimplePuzzleState.setToInitialState(int, int)</code>.</div>
</td>
</tr>
<tr id="i18" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html#testShuffleBoard--">testShuffleBoard</a></span>()</code>
<div class="block">Test method for <code>SimplePuzzleState.shuffleBoard(int)</code>.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="SimplePuzzleStateTest--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>SimplePuzzleStateTest</h4>
<pre>public&nbsp;SimplePuzzleStateTest()</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="setUp--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setUp</h4>
<pre>public&nbsp;void&nbsp;setUp()
           throws java.lang.Exception</pre>
<div class="block">Junit calls this method automatically each time before executing a method tagged as a test.
 It is used here to set up a particular test scenario of a 4x4 board with 1 empty slot
 and a sequence of 6 moves that goes a ways from the initial state and then returns.
 This gives room to test individual moves, equality of states.
 
 Note: it would be sufficient to execute this code just once as the testSequence
 and testOps arrays and their objects are not modified by the tests.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
</dl>
</li>
</ul>
<a name="tearDown--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>tearDown</h4>
<pre>public&nbsp;void&nbsp;tearDown()
              throws java.lang.Exception</pre>
<div class="block">Junit calls this method automatically each time after executing a method tagged as a test.
 Not used here.</div>
<dl>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code>java.lang.Exception</code></dd>
</dl>
</li>
</ul>
<a name="testHashCode--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testHashCode</h4>
<pre>public&nbsp;void&nbsp;testHashCode()</pre>
<div class="block">Test method for <code>Object.hashCode()</code>.
 The SimplePuzzleState class must implement (overwrite) the equals method.
 If one does so, it is recommended good practice to also overwrite the 
 hashCode method to have a consistent class design.</div>
</li>
</ul>
<a name="testSetToInitialState--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testSetToInitialState</h4>
<pre>public&nbsp;void&nbsp;testSetToInitialState()</pre>
<div class="block">Test method for <code>SimplePuzzleState.setToInitialState(int, int)</code>.
 The initial state for a given dimension and number of empty slots should list
 tiles with numbers in increasing order and have empty slots at the very end.
 Empty slots are encoded with zero values.</div>
</li>
</ul>
<a name="testGetOperation--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testGetOperation</h4>
<pre>public&nbsp;void&nbsp;testGetOperation()</pre>
<div class="block">Test method for <code>SimplePuzzleState.getOperation()</code>.
 We check if the stored operation for each state matches with
 the operation that was used.</div>
</li>
</ul>
<a name="testGetParent--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testGetParent</h4>
<pre>public&nbsp;void&nbsp;testGetParent()</pre>
<div class="block">Test method for <code>SimplePuzzleState.getParent()</code>.
 We check if the stored parent for each state matches with its predecessor'
 in the test sequence.</div>
</li>
</ul>
<a name="testGetPathLength--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testGetPathLength</h4>
<pre>public&nbsp;void&nbsp;testGetPathLength()</pre>
<div class="block">Test method for <code>SimplePuzzleState.getPathLength()</code>.
 We check if the path length from the initial state increases when the 
 sequence moves away from the initial state and even if 
 the sequence reverses direction and gets back to the initial state.
 This is because the move operation always extends the path.</div>
</li>
</ul>
<a name="testShuffleBoard--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testShuffleBoard</h4>
<pre>public&nbsp;void&nbsp;testShuffleBoard()</pre>
<div class="block">Test method for <code>SimplePuzzleState.shuffleBoard(int)</code>.
 The shuffle procedure performs a random walk of a given length.
 It works correctly if we can use it to perform a series inverse move operations
 that leads back to the initial state.</div>
</li>
</ul>
<a name="testEqualsObject--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testEqualsObject</h4>
<pre>public&nbsp;void&nbsp;testEqualsObject()</pre>
<div class="block">Test method for <code>Object.equals(java.lang.Object)</code>.
 Two PuzzleStates are equal if they have the tiles arranged on the board in the same way.
 Parent, path length and operation do not matter for equality.</div>
</li>
</ul>
<a name="testGetValue--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testGetValue</h4>
<pre>public&nbsp;void&nbsp;testGetValue()</pre>
<div class="block">Test method for <code>SimplePuzzleState.getValue(int, int)</code>.</div>
</li>
</ul>
<a name="testMove--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testMove</h4>
<pre>public&nbsp;void&nbsp;testMove()</pre>
<div class="block">Test method for <code>SimplePuzzleState.move(int, int, edu.wm.cs.cs301.slidingpuzzle.PuzzleState.Operation)</code>.
 We performed a series of move operations for the test sequence.
 We just need to check if the tiles on the board are set up correctly.</div>
</li>
</ul>
<a name="testFlip--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testFlip</h4>
<pre>public&nbsp;void&nbsp;testFlip()</pre>
<div class="block">Test method for <code>SimplePuzzleState.flip(int, int, int, int)</code>.
 The flip method is used when an tile is dragged across multiple empty slots.
 We test the special case of 1 empty slot which is trivial and may serve as a simple smoke test.
 For this case flip can only do a single move and must match a move operation.
 We use the test scenario and check 5 states with their successor states.</div>
</li>
</ul>
<a name="testFlipForMultipleEmptySlots--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testFlipForMultipleEmptySlots</h4>
<pre>public&nbsp;void&nbsp;testFlipForMultipleEmptySlots()</pre>
<div class="block">Test method for <code>SimplePuzzleState.flip(int, int, int, int)</code>.
 The flip method is used when an tile is dragged across multiple empty slots.
 We test the special case of 3 empty slots where a requested flip is indeed possible.
 The series of intermediate states is unique.</div>
</li>
</ul>
<a name="testFlipForMultipleEmptySlotsNotUnique--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testFlipForMultipleEmptySlotsNotUnique</h4>
<pre>public&nbsp;void&nbsp;testFlipForMultipleEmptySlotsNotUnique()</pre>
<div class="block">Test method for <code>SimplePuzzleState.flip(int, int, int, int)</code>.
 The flip method is used when an tile is dragged across multiple empty slots.
 We test the special case of 3 empty slots where a requested flip is indeed possible.
 The series of intermediate states is not unique, there are 2 possible ways to proceed.</div>
</li>
</ul>
<a name="testFlipForMultipleEmptySlotsCross--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testFlipForMultipleEmptySlotsCross</h4>
<pre>public&nbsp;void&nbsp;testFlipForMultipleEmptySlotsCross()</pre>
<div class="block">Test method for <code>SimplePuzzleState.flip(int, int, int, int)</code>.
 The flip method is used when an tile is dragged across multiple empty slots.
 We test the special case of 3 empty slots where a requested flip is indeed possible.
 There are 3 possible options, one is the solution.</div>
</li>
</ul>
<a name="testFlipForMultipleEmptySlotsDeadEnd--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testFlipForMultipleEmptySlotsDeadEnd</h4>
<pre>public&nbsp;void&nbsp;testFlipForMultipleEmptySlotsDeadEnd()</pre>
<div class="block">Test method for <code>SimplePuzzleState.flip(int, int, int, int)</code>.
 The flip method is used when an tile is dragged across multiple empty slots.
 We test the special case of 3 empty slots where a requested flip is indeed possible.
 The series of intermediate states is not unique, there are 2 options to proceed, only 1 works.</div>
</li>
</ul>
<a name="testFlipForMultipleEmptySlotsDeadEnd2--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testFlipForMultipleEmptySlotsDeadEnd2</h4>
<pre>public&nbsp;void&nbsp;testFlipForMultipleEmptySlotsDeadEnd2()</pre>
<div class="block">Test method for <code>SimplePuzzleState.flip(int, int, int, int)</code>.
 The flip method is used when an tile is dragged across multiple empty slots.
 We test the special case of 3 empty slots where a requested flip is indeed possible.
 The series of intermediate states is not unique, there are 2 options to proceed, only 1 works.</div>
</li>
</ul>
<a name="testIsEmptyIntInt--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>testIsEmptyIntInt</h4>
<pre>public&nbsp;void&nbsp;testIsEmptyIntInt()</pre>
<div class="block">Test method for <code>SimplePuzzleState.isEmpty(int, int)</code>.
 We performed a series of move operations for the test sequence.
 We just need to check if the empty slot is on the correct position.</div>
</li>
</ul>
<a name="testGetStateWithShortestPath--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>testGetStateWithShortestPath</h4>
<pre>public&nbsp;void&nbsp;testGetStateWithShortestPath()</pre>
<div class="block">Test method for <code>SimplePuzzleState.getStateWithShortestPath()</code>.
 The calculated new state must have the same setting of tiles and the current path length is a 
 natural upper bound on the path length for the calculated state.
 If the checkShortestPathCalculation flag is set, we test if method recognizes shorter path
 on the test sequence.</div>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../../edu/wm/cs/cs301/slidingpuzzle/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/SimplePuzzleStateTest.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev&nbsp;Class</li>
<li>Next&nbsp;Class</li>
</ul>
<ul class="navList">
<li><a href="../../../../../index.html?edu/wm/cs/cs301/slidingpuzzle/SimplePuzzleStateTest.html" target="_top">Frames</a></li>
<li><a href="SimplePuzzleStateTest.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../../../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
