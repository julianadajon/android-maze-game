package falstad;

import java.util.Random; 
import falstad.Robot.Direction;
import falstad.Robot.Turn;
import generation.CardinalDirection;
import generation.Distance;

/**
 * This class solves a randomly generated maze by using pledge's algorithm
 * @author julianadajon
 *
 */
public class Pledge implements RobotDriver{

	BasicRobot basicRobot;
	int width;
	int height;
	Distance distance;
	MazeController controller;

	
	
	public Pledge(){
	}
	
	@Override
	public void setRobot(BasicRobot r) {
		basicRobot = r;
		
	}
	

	@Override
	public void setDimensions(int width, int height) {
		this.width = width;
		this.height = height; 
	}

	@Override
	public void setDistance(Distance distance) {
		this.distance = distance; 		
	}

	@Override
	public boolean drive2Exit() throws Exception{
		if (basicRobot.hasStopped() == true){
			throw new Exception();
		}
		
		//randomly pick main direction to go
		CardinalDirection mainDir = CardinalDirection.North;
		
		Random rand = new Random();
		int randomDir = rand.nextInt(4);
		
		if (randomDir == 0){
			mainDir = CardinalDirection.North;
		}
		
		if (randomDir == 1){
			mainDir = CardinalDirection.South;
		}
		
		if (randomDir == 2){
			mainDir = CardinalDirection.East;
		}
		
		if (randomDir == 3){
			mainDir = CardinalDirection.West;
		}
		
		//find direction robot is facing, then turn accordingly so it faces mainDir
		faceCardinalDir(mainDir);
			
		//while not at exit
		while (basicRobot.isAtExit() == false){
			
			//move in this direction until you hit a wall 
			//(while forward sensor doesn't give you 0, move forward)
			while (basicRobot.distanceToObstacle(Direction.FORWARD) > 0){
				basicRobot.move(1,  false);
			}
		
			//initialize counter = 0
			int counter =  1;
			int numOfLoops = 0; 
			//enter pledge alg while loop, while counter != 0 and not at exit
			
			while (counter != 0 && basicRobot.isAtExit() == false){
				
				//if start of pledge alg, set counter to 0
				if (numOfLoops == 0){
					counter = 0; 
				}
				
				//if wall to right and wall in front, turn left (C-=1)
				if (basicRobot.distanceToObstacle(Direction.RIGHT) == 0 
						&& basicRobot.distanceToObstacle(Direction.FORWARD) == 0){
					basicRobot.rotate(Turn.LEFT);
					counter -= 1; 
				}
				
				//else if wall to right and wall not in front, move forward
				else if (basicRobot.distanceToObstacle(Direction.RIGHT) == 0 
						&& basicRobot.distanceToObstacle(Direction.FORWARD) > 0){
					basicRobot.move(1, false);
				}
				
				//else if no wall to right, turn right (C+=1) and move forward
//				else if (basicRobot.distanceToObstacle(Direction.RIGHT) > 0){
				else{
					basicRobot.rotate(Turn.RIGHT);
					basicRobot.move(1, false);
					counter += 1; 
				}
				
				numOfLoops++; 
			}
				

		}
		controller = basicRobot.getMazeController();
		controller.switchToFinishScreen();
//		//handle at exit case
//		//check each direction if you can see exit
//		//depending on direction of robot, rotate towards exit, then move
//		if (basicRobot.canSeeExit(Direction.LEFT) == true 
//				&& basicRobot.hasStopped() == false ){
//			basicRobot.rotate(Turn.LEFT);
//			basicRobot.move(1, false);
//		}
//		
//		//may need to switch direction to backward
//		if (basicRobot.canSeeExit(Direction.FORWARD) == true
//				&& basicRobot.hasStopped() == false){
//			basicRobot.move(1, false);
//		}
//		
//		//may need to switch direction to forward
//		if (basicRobot.canSeeExit(Direction.BACKWARD) == true
//				&& basicRobot.hasStopped() == false){
//			basicRobot.rotate(Turn.AROUND);
//			basicRobot.move(1, false);
//		}
//
//		if (basicRobot.canSeeExit(Direction.RIGHT) == true
//				&& basicRobot.hasStopped() == false){
//			basicRobot.rotate(Turn.RIGHT);
//			basicRobot.move(1, false);
//		}
			
		
		return true;
	}
	
		
	
	public void faceCardinalDir(CardinalDirection dirToFace){
		CardinalDirection currDir = basicRobot.getCurrentDirection();
		
		if (currDir == CardinalDirection.North){
			if (dirToFace == CardinalDirection.North){
				//do nothing
			}
			if (dirToFace == CardinalDirection.South){
				basicRobot.rotate(Turn.AROUND);
			}
			if (dirToFace == CardinalDirection.East){
				basicRobot.rotate(Turn.LEFT);
			}
			if (dirToFace == CardinalDirection.West){
				basicRobot.rotate(Turn.RIGHT);
			}
		}
		
		else if (currDir == CardinalDirection.South){
			if (dirToFace == CardinalDirection.North){
				basicRobot.rotate(Turn.AROUND);
			}
			if (dirToFace == CardinalDirection.South){
				//do nothing
			}
			if (dirToFace == CardinalDirection.East){
				basicRobot.rotate(Turn.RIGHT);
			}
			if (dirToFace == CardinalDirection.West){
				basicRobot.rotate(Turn.LEFT);
			}
		}

		else if (currDir == CardinalDirection.East){
			if (dirToFace == CardinalDirection.North){
				basicRobot.rotate(Turn.RIGHT);
			}
			if (dirToFace == CardinalDirection.South){
				basicRobot.rotate(Turn.LEFT);
			}
			if (dirToFace == CardinalDirection.East){
				//do nothing
			}
			if (dirToFace == CardinalDirection.West){
				basicRobot.rotate(Turn.RIGHT);
			}
		}
		
		else if (currDir == CardinalDirection.West){
			if (dirToFace == CardinalDirection.North){
				basicRobot.rotate(Turn.LEFT);
			}
			if (dirToFace == CardinalDirection.South){
				basicRobot.rotate(Turn.RIGHT);
			}
			if (dirToFace == CardinalDirection.East){
				basicRobot.rotate(Turn.RIGHT);
			}
			if (dirToFace == CardinalDirection.West){
				//do nothing
			}
		}

		
		
	}
	
	@Override
	public float getEnergyConsumption() {
		 return 2500 - basicRobot.getBatteryLevel();
	}

	@Override
	public int getPathLength() {
		return basicRobot.getPathLength();
	}

	@Override
	public void keyDown(int key) {
		// TODO Auto-generated method stub
		
	}

}
