package edu.wm.cs.cs301.slidingpuzzle;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

//Final Puzzle Project. 

public class SimplePuzzleState implements PuzzleState {
	
	int[][] board; 
	PuzzleState parent;
	int dimension;
	Operation operation;
	int pathLength = 0; //number of moves

	
	public SimplePuzzleState() {
		// secondary constructor, calls primary constructor.
		// explicit constructor invocation; used if initial values are not
		// provided by argument.
	}
	
	public SimplePuzzleState(int[][] board, PuzzleState parent, PuzzleState current, Operation operation) {
		// primary constructor
		this.board = board;
		this.parent = parent;
		this.operation = operation;
	}

	
	@Override
	public void setToInitialState(int dimension, int numberOfEmptySlots) {
		
		//create 2dim array w/ dimensions
		this.board = new int[dimension][dimension];

		//path length is also index of linked list that stores fields
		this.pathLength = 0;
		this.parent = null;
		this.operation = null;
		this.dimension = dimension; 
		
		// populate empty 2 dimensional array with nested for loops 
		//set values to 1...n-empty spaces
		int i = 0;
		int j = 0;
		int val = 1; 

		//outer for loop gets to row location
		for (i = 0; i < dimension; i++) {
			// inner for loop accesses columns of each row
			
			for (j = 0; j < dimension; j++){
				// check if empty slots
				this.board[i][j] = val;
				
				if (val > Math.pow(dimension, 2) - numberOfEmptySlots) {
					this.board[i][j] = 0;
				}
				val++;
			}
		}
	}
	
	
	@Override
	public int getValue(int row, int column) {
		return this.board[row][column];
	}

	@Override
	public PuzzleState getParent() {
		// return parent of current state.  
		// state is stores in linked list similar structure, return index of current state - 1
		return this.parent;
	}

	@Override
	public Operation getOperation() {
		// returns operation performed in current state
		// check type of operation, translate operation to array indices 
		return this.operation;
	}

	@Override
	public int getPathLength() {
		// must keep track of number of fields, then return this number (represents number of moves)
		return this.pathLength;
	}

	@Override
	public PuzzleState move(int row, int column, Operation op) {
		// first check to see if tile can be moved to indicated spot (is spot empty)
		// 1. translate operation to array indices
		boolean emptySpot = false; 
		Operation myOp = null;
		if (op == Operation.MOVERIGHT) {
			int newCol = column + 1;
			if (newCol < dimension) {
				if (this.board[row][newCol] == 0) {
					emptySpot = true;
					myOp = op;
				}
			}
		}
		
		if (op == Operation.MOVELEFT) {
			int newCol = column - 1;
			if (newCol >= 0) {
				if (this.board[row][newCol] == 0) {
					emptySpot = true;
					myOp = op;
				}
			}
		}
		
		if (op == Operation.MOVEUP) {
			int newRow = row - 1;
			if (newRow >= 0) {
				if (this.board[newRow][column] == 0) {
					emptySpot = true;
					myOp = op;
				}
			}
		}
		
		if (op == Operation.MOVEDOWN) {
			int newRow = row + 1;
			if (newRow < dimension) {
				if (this.board[newRow][column] == 0) {
					emptySpot = true;
					myOp = op;
				}
			}
		}

		//if yes: 
		if (emptySpot == true) {
		//	2. make a new parent state and set it to the current object (or copy?)**
			// instantiated incorrectly?? 
			SimplePuzzleState newPuzzleState = new SimplePuzzleState();
			newPuzzleState.parent = this;
			newPuzzleState.board = new int[dimension][dimension];
			//outer for loop gets to row location
			int i = 0;
			int j = 0;
			
			for (i = 0; i < dimension; i++) {
				for (j = 0; j < dimension; j++){
					newPuzzleState.board[i][j] = this.board[i][j];
				}
			}

		//	3. set the operation to op indicated; operation should update pathlength of initial state 
		//     to new current state (increase count by 1)
			newPuzzleState.operation = myOp; 
			newPuzzleState.pathLength = this.pathLength + 1;
			newPuzzleState.dimension = dimension;
		
			int temp = 0;
		//	4. update the current field to state that results from move operation (using indices)
			// shallow copies. need deep copy?
			if (myOp == Operation.MOVERIGHT) {
				temp = newPuzzleState.board[row][column];
				newPuzzleState.board[row][column] = 0;
				newPuzzleState.board[row][column + 1] = temp;
			}
			if (myOp == Operation.MOVELEFT) {
				temp = newPuzzleState.board[row][column];
				newPuzzleState.board[row][column] = 0;
				newPuzzleState.board[row][column - 1] = temp;
			}
			if (myOp == Operation.MOVEUP) {
				temp = newPuzzleState.board[row][column];
				newPuzzleState.board[row][column] = 0;
				newPuzzleState.board[row - 1][column] = temp;
			}
			if (myOp == Operation.MOVEDOWN) {
				temp = newPuzzleState.board[row][column];
				newPuzzleState.board[row][column] = 0;
				newPuzzleState.board[row + 1][column] = temp;
			}
			return newPuzzleState;
		}
		
		else {return null;}
	}

	@Override
	public PuzzleState flip(int startRow, int startColumn, int endRow, int endColumn) {

		//check if end is empty; else return null 
		if (this.isEmpty(endRow, endColumn) == true) {
			
			//check if R/L/U/D are empty (use if statements, make sure to check index bound)
			//If empty, find Manhattan distance to end location
			//Track minimum distance and location

			
			int colRight = startColumn + 1;
			int colLeft = startColumn - 1;
			int rowUp = startRow - 1;
			int rowDown = startRow + 1;
			
			int distRight = 0;
			int distLeft = 0;
			int distUp = 0;
			int distDown = 0;
			
			int minDistance = dimension * dimension;
			int minDistanceLocationRow = 0;
			int minDistanceLocationColumn = 0;

			if (colRight < this.dimension) {
				if (this.isEmpty(startRow, colRight) == true) {
					distRight = Math.abs(colRight - endColumn) + Math.abs(startRow - endRow);
					if (distRight <= minDistance) {
						minDistance = distRight;
						minDistanceLocationRow = startRow;
						minDistanceLocationColumn = colRight;
						operation = Operation.MOVERIGHT; 
					}
				}
			}
			
			if (colLeft >= 0) {
				if (this.isEmpty(startRow, colLeft) == true) {
					distLeft = Math.abs(colLeft - endColumn) + Math.abs(startRow - endRow);
					if (distLeft <= minDistance) {
						minDistance = distLeft;
						minDistanceLocationRow = startRow;
						minDistanceLocationColumn = colLeft;
						operation = Operation.MOVELEFT;
					}
				}
			}
			
			if (rowUp >= 0) {
				if (this.isEmpty(rowUp, startColumn) == true) {
					distUp = Math.abs(endRow - rowUp) + Math.abs(endColumn - startColumn);
					if (distUp <= minDistance) {
						minDistance = distUp;
						minDistanceLocationRow = rowUp;
						minDistanceLocationColumn = startColumn;
						operation = Operation.MOVEUP;
					}
				}
			}
			
			if (rowDown < this.dimension) {
				if (this.isEmpty(rowDown, startColumn) == true) {
					distDown = Math.abs(startColumn - endColumn) + Math.abs(rowDown - endRow);
					if (distDown <= minDistance) {
						minDistance = distDown;
						minDistanceLocationRow = rowDown;
						minDistanceLocationColumn = startColumn;
						operation = Operation.MOVEDOWN;
					}
				}
			}

			//base case: location of minimum distance empty spot is the end location
			if ((minDistanceLocationRow == endRow) && (minDistanceLocationColumn == endColumn)) {
				return this.move(startRow, startColumn, operation);
			}
			
			//recursive case: return flip(empty location closest to end, end location)
			else {
				PuzzleState move = this.move(startRow, startColumn, operation);
				return move.flip(minDistanceLocationRow, minDistanceLocationColumn, endRow, endColumn);
				}
		}
		return null;
	}	
			
			
	@Override
	public PuzzleState shuffleBoard(int pathLength) {
	
			//find location of empty tile with nested for loop
			int i = 0;
			int j = 0;
			int emptyRow = 0;
			int emptyCol = 0;
			
			for (i = 0; i < dimension; i++){
				for (j = 0; j < dimension; j++){
					if (this.isEmpty(i, j)) {
						emptyRow = i;
						emptyCol = j;				
					}
				}
			}
			
			//check what tiles exist around empty space 
			//add operations to list--
			//if location exists: add corresponding operation to list
			
			int colRight = emptyCol + 1;
			int colLeft = emptyCol - 1;
			int rowUp = emptyRow - 1;
			int rowDown = emptyRow + 1;
			

			ArrayList<Operation> listOperation = new ArrayList<Operation>(); 
			
			//add MOVELEFT to list (to be acted upon the tile to the right of empty space)
			if (colRight < dimension){ 
				if (this.board[emptyRow][colRight] != 0) {
					listOperation.add(Operation.MOVELEFT);
				}
			}
			
			//add MOVERIGHT to list (to be acted upon the tile to the left of empty space)
			if (colLeft >= 0){ 
				if (this.board[emptyRow][colLeft] != 0) {
					listOperation.add(Operation.MOVERIGHT);
				}
			}
			
			//add MOVEDOWN to list (to be acted upon the tile above the empty space)
			if (rowUp >= 0){ 
				if (this.board[rowUp][emptyCol] != 0) {
					listOperation.add(Operation.MOVEDOWN);
				}
			}
			
			//add MOVEUP to list (to be acted upon the tile below the empty space)
			if (rowDown < dimension){ 
				if (this.board[rowDown][emptyCol] != 0) {
					listOperation.add(Operation.MOVEUP);
				}
			}
			
			//generate random number up to length of operation list (save to variable)
			Random operation = new Random();
			int randOperationIndex = operation.nextInt(listOperation.size());
			
			//set operation = list[random number variable]
			Operation myOperation = listOperation.get(randOperationIndex);
			
			//find operation location (or tile to move)
			//example:	if operation == MR: location is tile right of empty spot, save location
			int tileToMoveRow = 0;
			int tileToMoveCol = 0;
			if (myOperation == Operation.MOVERIGHT){
				tileToMoveRow = emptyRow;
				tileToMoveCol = colLeft;
			}
			
			if (myOperation == Operation.MOVELEFT){
				tileToMoveRow = emptyRow;
				tileToMoveCol = colRight;
			}
			
			if (myOperation == Operation.MOVEDOWN){
				tileToMoveRow = rowUp;
				tileToMoveCol = emptyCol;
			}
			
			if (myOperation == Operation.MOVEUP){
				tileToMoveRow = rowDown;
				tileToMoveCol = emptyCol;
			}


			if (pathLength == 1) {
				return this.move(tileToMoveRow, tileToMoveCol, myOperation);
			}
			
			else {
				PuzzleState moveTile = this.move(tileToMoveRow, tileToMoveCol, myOperation);
				return moveTile.shuffleBoard(pathLength - 1);
			}
	}


	@Override
	public boolean isEmpty(int row, int column) {
		// check to see if tile has 0
		// if yes, return T
		if (this.board[row][column] == 0) {
			return true;
		}
		else {return false;}
	}


	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + Arrays.deepHashCode(board);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		SimplePuzzleState other = (SimplePuzzleState) obj;
		if (!Arrays.deepEquals(board, other.board))
			return false;
		return true;
	}

	@Override
	public PuzzleState getStateWithShortestPath() {
		return this;
	}

}
