<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (1.8.0_101) on Tue Oct 04 10:13:17 EDT 2016 -->
<title>MazeBuilderEller</title>
<meta name="date" content="2016-10-04">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
<script type="text/javascript" src="../script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="MazeBuilderEller";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/MazeBuilderEller.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../generation/MazeBuilder.html" title="class in generation"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../generation/MazeBuilderEllerTest.html" title="class in generation"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?generation/MazeBuilderEller.html" target="_top">Frames</a></li>
<li><a href="MazeBuilderEller.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">generation</div>
<h2 title="Class MazeBuilderEller" class="title">Class MazeBuilderEller</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li><a href="../generation/MazeBuilder.html" title="class in generation">generation.MazeBuilder</a></li>
<li>
<ul class="inheritance">
<li>generation.MazeBuilderEller</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.lang.Runnable</dd>
</dl>
<hr>
<br>
<pre>public class <span class="typeNameLabel">MazeBuilderEller</span>
extends <a href="../generation/MazeBuilder.html" title="class in generation">MazeBuilder</a>
implements java.lang.Runnable</pre>
<div class="block">This class has the responsibility to create a maze of given dimensions (width, height) 
 together with a solution based on a distance matrix.
 The MazeBuilder implements Runnable such that it can be run a separate thread.
 The MazeFactory has a MazeBuilder and handles the thread management.   

 
 The maze is built with a randomized version of Eller's algorithm. 
 The algorithm looks at each row individually and randomly breaks down walls, 
 first horizontally, then vertically, by tracking sets of cells.</div>
<dl>
<dt><span class="simpleTagLabel">Author:</span></dt>
<dd>Juliana Dajon</dd>
</dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../generation/MazeBuilderEller.html#MazeBuilderEller--">MazeBuilderEller</a></span>()</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../generation/MazeBuilderEller.html#MazeBuilderEller-boolean-">MazeBuilderEller</a></span>(boolean&nbsp;det)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderEller.html#deleteWallsForHorizontalConnections-java.util.HashMap-int:A:A-int-generation.Cells-">deleteWallsForHorizontalConnections</a></span>(java.util.HashMap&lt;java.lang.Integer,java.util.ArrayList&lt;int[]&gt;&gt;&nbsp;sets,
                                   int[][]&nbsp;board,
                                   int&nbsp;w,
                                   <a href="../generation/Cells.html" title="class in generation">Cells</a>&nbsp;cells)</code>
<div class="block">This method randomly makes horizontal connections in a particular row.</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderEller.html#deleteWallsForLastRow-java.util.HashMap-int:A:A-int-generation.Cells-">deleteWallsForLastRow</a></span>(java.util.HashMap&lt;java.lang.Integer,java.util.ArrayList&lt;int[]&gt;&gt;&nbsp;sets,
                     int[][]&nbsp;board,
                     int&nbsp;w,
                     <a href="../generation/Cells.html" title="class in generation">Cells</a>&nbsp;cells)</code>
<div class="block">This method randomly makes horizontal connections in the last row.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderEller.html#deleteWallsForVerticalConnections-java.util.HashMap-int:A:A-int-generation.Cells-">deleteWallsForVerticalConnections</a></span>(java.util.HashMap&lt;java.lang.Integer,java.util.ArrayList&lt;int[]&gt;&gt;&nbsp;sets,
                                 int[][]&nbsp;board,
                                 int&nbsp;w,
                                 <a href="../generation/Cells.html" title="class in generation">Cells</a>&nbsp;cells)</code>
<div class="block">This method randomly makes vertical connections in a particular row.</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderEller.html#initializeHashMapWithSingletons-java.util.HashMap-int:A:A-">initializeHashMapWithSingletons</a></span>(java.util.HashMap&lt;java.lang.Integer,java.util.ArrayList&lt;int[]&gt;&gt;&nbsp;sets,
                               int[][]&nbsp;board)</code>
<div class="block">This method initializes the hash map so that every key (set number) has its own list of cell locations.</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderEller.html#mergeSetsInHashMap-java.util.HashMap-int-int-">mergeSetsInHashMap</a></span>(java.util.HashMap&lt;java.lang.Integer,java.util.ArrayList&lt;int[]&gt;&gt;&nbsp;sets,
                  int&nbsp;cell1,
                  int&nbsp;cell2)</code>
<div class="block">If arbitrary neighboring cells (cell1 and cell2) merge by means of a horizontal connection, 
 this method updates the hash map and merges the sets of cell1 and cell2.</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderEller.html#mergeSetsInHashMapVertical-java.util.HashMap-int:A:A-int-java.lang.Integer-int:A-">mergeSetsInHashMapVertical</a></span>(java.util.HashMap&lt;java.lang.Integer,java.util.ArrayList&lt;int[]&gt;&gt;&nbsp;sets,
                          int[][]&nbsp;board,
                          int&nbsp;w,
                          java.lang.Integer&nbsp;key,
                          int[]&nbsp;addVert)</code>
<div class="block">If arbitrary neighboring cells (cell1 and cell2) merge by means of a vertical connection, 
 this methods updates the hash map and merges the sets of cell1 and cell2.</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderEller.html#mergeSetsOnBoard-int:A:A-int-int-int-int-int-">mergeSetsOnBoard</a></span>(int[][]&nbsp;board,
                int&nbsp;w,
                int&nbsp;h,
                int&nbsp;cell1,
                int&nbsp;cell2,
                int&nbsp;height)</code>
<div class="block">If the sets of cell1 and cell2 are merged together, this method check the rest of the row
 and updates any cells still contained in cell2's sets (to be merged with cell1's set).</div>
</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>int[][]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../generation/MazeBuilderEller.html#populate-int:A:A-">populate</a></span>(int[][]&nbsp;board)</code>
<div class="block">This method populates a 2D array with given dimensions with unique integer values 1 through width * height.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.generation.MazeBuilder">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;generation.<a href="../generation/MazeBuilder.html" title="class in generation">MazeBuilder</a></h3>
<code><a href="../generation/MazeBuilder.html#buildOrder-generation.Order-">buildOrder</a>, <a href="../generation/MazeBuilder.html#getSign-int-">getSign</a>, <a href="../generation/MazeBuilder.html#run--">run</a></code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Runnable">
<!--   -->
</a>
<h3>Methods inherited from interface&nbsp;java.lang.Runnable</h3>
<code>run</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="MazeBuilderEller--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>MazeBuilderEller</h4>
<pre>public&nbsp;MazeBuilderEller()</pre>
</li>
</ul>
<a name="MazeBuilderEller-boolean-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>MazeBuilderEller</h4>
<pre>public&nbsp;MazeBuilderEller(boolean&nbsp;det)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="deleteWallsForVerticalConnections-java.util.HashMap-int:A:A-int-generation.Cells-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>deleteWallsForVerticalConnections</h4>
<pre>public&nbsp;void&nbsp;deleteWallsForVerticalConnections(java.util.HashMap&lt;java.lang.Integer,java.util.ArrayList&lt;int[]&gt;&gt;&nbsp;sets,
                                              int[][]&nbsp;board,
                                              int&nbsp;w,
                                              <a href="../generation/Cells.html" title="class in generation">Cells</a>&nbsp;cells)</pre>
<div class="block">This method randomly makes vertical connections in a particular row.  First, it checks to see what sets are in the row.  
 For each set, it makes at the minimum one vertical connection by deleting a wall between 2 cells. 
 Next, the two sets of the 2 distinct cells are merged together, and the hash map is updated 
 (both processes occur by means of helper methods).</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>sets</code> - </dd>
<dd><code>board</code> - </dd>
<dd><code>w</code> - </dd>
<dd><code>cells</code> - </dd>
</dl>
</li>
</ul>
<a name="deleteWallsForHorizontalConnections-java.util.HashMap-int:A:A-int-generation.Cells-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>deleteWallsForHorizontalConnections</h4>
<pre>public&nbsp;void&nbsp;deleteWallsForHorizontalConnections(java.util.HashMap&lt;java.lang.Integer,java.util.ArrayList&lt;int[]&gt;&gt;&nbsp;sets,
                                                int[][]&nbsp;board,
                                                int&nbsp;w,
                                                <a href="../generation/Cells.html" title="class in generation">Cells</a>&nbsp;cells)</pre>
<div class="block">This method randomly makes horizontal connections in a particular row.  It iterates through the cells in the row, 
 comparing a single cell to its neighbor on the right.  If the cells are of different sets,
 it randomly decides whether or not to make a horizontal connection by deleting a wall.
 The 2 sets of the 2 cells are merged, and the hash map is updated (both by means of helper methods).</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>sets</code> - </dd>
<dd><code>board</code> - </dd>
<dd><code>w</code> - </dd>
<dd><code>cells</code> - </dd>
</dl>
</li>
</ul>
<a name="deleteWallsForLastRow-java.util.HashMap-int:A:A-int-generation.Cells-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>deleteWallsForLastRow</h4>
<pre>public&nbsp;void&nbsp;deleteWallsForLastRow(java.util.HashMap&lt;java.lang.Integer,java.util.ArrayList&lt;int[]&gt;&gt;&nbsp;sets,
                                  int[][]&nbsp;board,
                                  int&nbsp;w,
                                  <a href="../generation/Cells.html" title="class in generation">Cells</a>&nbsp;cells)</pre>
<div class="block">This method randomly makes horizontal connections in the last row.  It iterates through the cells in the row, 
 comparing the current cell to its neighbor on the right.  If the cells are of different sets,
 it makes a horizontal connection by deleting the wall between the two cells.
 The 2 sets of the 2 cells are merged, and the hash map is updated (both by means of helper methods).</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>sets</code> - </dd>
<dd><code>board</code> - </dd>
<dd><code>w</code> - </dd>
<dd><code>cells</code> - </dd>
</dl>
</li>
</ul>
<a name="mergeSetsOnBoard-int:A:A-int-int-int-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mergeSetsOnBoard</h4>
<pre>public&nbsp;void&nbsp;mergeSetsOnBoard(int[][]&nbsp;board,
                             int&nbsp;w,
                             int&nbsp;h,
                             int&nbsp;cell1,
                             int&nbsp;cell2,
                             int&nbsp;height)</pre>
<div class="block">If the sets of cell1 and cell2 are merged together, this method check the rest of the row
 and updates any cells still contained in cell2's sets (to be merged with cell1's set).</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>board</code> - </dd>
<dd><code>w</code> - </dd>
<dd><code>h</code> - </dd>
<dd><code>cell1</code> - </dd>
<dd><code>cell2</code> - </dd>
<dd><code>height</code> - </dd>
</dl>
</li>
</ul>
<a name="mergeSetsInHashMap-java.util.HashMap-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mergeSetsInHashMap</h4>
<pre>public&nbsp;void&nbsp;mergeSetsInHashMap(java.util.HashMap&lt;java.lang.Integer,java.util.ArrayList&lt;int[]&gt;&gt;&nbsp;sets,
                               int&nbsp;cell1,
                               int&nbsp;cell2)</pre>
<div class="block">If arbitrary neighboring cells (cell1 and cell2) merge by means of a horizontal connection, 
 this method updates the hash map and merges the sets of cell1 and cell2.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>sets</code> - </dd>
<dd><code>cell1</code> - </dd>
<dd><code>cell2</code> - </dd>
</dl>
</li>
</ul>
<a name="mergeSetsInHashMapVertical-java.util.HashMap-int:A:A-int-java.lang.Integer-int:A-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mergeSetsInHashMapVertical</h4>
<pre>public&nbsp;void&nbsp;mergeSetsInHashMapVertical(java.util.HashMap&lt;java.lang.Integer,java.util.ArrayList&lt;int[]&gt;&gt;&nbsp;sets,
                                       int[][]&nbsp;board,
                                       int&nbsp;w,
                                       java.lang.Integer&nbsp;key,
                                       int[]&nbsp;addVert)</pre>
<div class="block">If arbitrary neighboring cells (cell1 and cell2) merge by means of a vertical connection, 
 this methods updates the hash map and merges the sets of cell1 and cell2.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>sets</code> - </dd>
<dd><code>board</code> - </dd>
<dd><code>w</code> - </dd>
<dd><code>key</code> - </dd>
<dd><code>addVert</code> - </dd>
</dl>
</li>
</ul>
<a name="initializeHashMapWithSingletons-java.util.HashMap-int:A:A-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>initializeHashMapWithSingletons</h4>
<pre>public&nbsp;void&nbsp;initializeHashMapWithSingletons(java.util.HashMap&lt;java.lang.Integer,java.util.ArrayList&lt;int[]&gt;&gt;&nbsp;sets,
                                            int[][]&nbsp;board)</pre>
<div class="block">This method initializes the hash map so that every key (set number) has its own list of cell locations.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>sets</code> - </dd>
<dd><code>board</code> - </dd>
</dl>
</li>
</ul>
<a name="populate-int:A:A-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>populate</h4>
<pre>public&nbsp;int[][]&nbsp;populate(int[][]&nbsp;board)</pre>
<div class="block">This method populates a 2D array with given dimensions with unique integer values 1 through width * height.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>board</code> - </dd>
<dt><span class="returnLabel">Returns:</span></dt>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/MazeBuilderEller.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../generation/MazeBuilder.html" title="class in generation"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../generation/MazeBuilderEllerTest.html" title="class in generation"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?generation/MazeBuilderEller.html" target="_top">Frames</a></li>
<li><a href="MazeBuilderEller.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
